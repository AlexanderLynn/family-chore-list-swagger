---
swagger: "2.0"
info:
  description: "Basic documentation for the Family Chore List REST api endpoints"
  version: "1.0.0"
  title: "Family Chore List Api Docs"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "family-chore-list-herokuapp.com"
basePath: "/"
tags:
- name: "auth"
  description: "Access to API Endpoints"
- name: "todoList"
  description: "Everything about your Todo Lists"
- name: "family"
  description: "Access Family Members"
schemes:
- "https"
- "http"
paths:
  /auth/signup:
    put:
      tags:
      - "auth"
      summary: "Creates a new family member"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the todoList"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid Order"
  /auth/login:
    post:
      tags:
      - "auth"
      summary: "Logs in family member"
      description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "todoList object that needs to be added to the auth"
        required: true
        schema:
          $ref: "#/definitions/todoList"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
  /todoList/todos:
    get:
      tags:
      - "todoList"
      summary: "Gets all todos"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findtodoListsByStatus"
      produces:
      - "application/json"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/todoList"
        "400":
          description: "Invalid status value"
      security:
      - todoListauth_auth:
        - "write:todoLists"
        - "read:todoLists"
  /todoList/todo:
    post:
      tags:
      - "todoList"
      summary: "Adds a new todo"
      description: ""
      operationId: "addtodoList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "todoList object that needs to be added to the auth"
        required: true
        schema:
          $ref: "#/definitions/todoList"
      responses:
        "405":
          description: "Invalid input"
      security:
      - todoListauth_auth:
        - "write:todoLists"
        - "read:todoLists"
  /todoList/todo/:todoId:
    delete:
      tags:
      - "todoList"
      summary: "Deletes a todo"
      description: ""
      operationId: "updatetodoList"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "todoList object that needs to be added to the auth"
        required: true
        schema:
          $ref: "#/definitions/todoList"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "todoList not found"
        "405":
          description: "Validation exception"
      security:
      - todoListauth_auth:
        - "write:todoLists"
        - "read:todoLists"
  /family/members:
    get:
      tags:
      - "family"
      summary: "Gets all family members"
      description: ""
      operationId: "createfamilysWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of family object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/family"
      responses:
        default:
          description: "successful operation"
  /family/member/:memberId:
    get:
      tags:
      - "family"
      summary: "Gets all family members"
      description: ""
      operationId: "getFamilyMember"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of family object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/family"
      responses:
        default:
          description: "successful operation"
  /family/member:
    post:
      tags:
      - "family"
      summary: "Creates a family member"
      description: "This can only be done by the logged in family."
      operationId: "createfamily"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created family object"
        required: true
        schema:
          $ref: "#/definitions/family"
      responses:
        default:
          description: "successful operation"
securityDefinitions:
  todoListauth_auth:
    type: "oauth2"
    authorizationUrl: "http://todoListauth.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:todoLists: "modify todoLists in your account"
      read:todoLists: "read your todoLists"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      todoListId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  family:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      familyname:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      familyStatus:
        type: "integer"
        format: "int32"
        description: "family Status"
    xml:
      name: "family"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  todoList:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "todoList status in the auth"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "todoList"